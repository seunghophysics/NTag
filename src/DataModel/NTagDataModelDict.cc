//
// File generated by rootcint at Mon May 24 19:57:38 2021

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIsrcdIDataModeldINTagDataModelDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "NTagDataModelDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Cluster< ::PMTHit > ClusterlEPMTHitgR;
      #else
      class ClusterlEPMTHitgR  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ClusterlEPMTHitgR() throw() {};
         vector< ::PMTHit > element; //
         unsigned int nElements; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Cluster< ::Candidate > ClusterlECandidategR;
      #else
      class ClusterlECandidategR  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ClusterlECandidategR() throw() {};
         vector< ::Candidate > element; //
         unsigned int nElements; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Cluster< ::Particle > ClusterlEParticlegR;
      #else
      class ClusterlEParticlegR  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ClusterlEParticlegR() throw() {};
         vector< ::Particle > element; //
         unsigned int nElements; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Cluster< ::TrueCapture > ClusterlETrueCapturegR;
      #else
      class ClusterlETrueCapturegR  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ClusterlETrueCapturegR() throw() {};
         vector< ::TrueCapture > element; //
         unsigned int nElements; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void PMTHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_PMTHit(void *p = 0);
   static void *newArray_PMTHit(Long_t size, void *p);
   static void delete_PMTHit(void *p);
   static void deleteArray_PMTHit(void *p);
   static void destruct_PMTHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::PMTHit*)
   {
      ::PMTHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::PMTHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("PMTHit", ::PMTHit::Class_Version(), "./PMTHit.hh", 21,
                  typeid(::PMTHit), DefineBehavior(ptr, ptr),
                  &::PMTHit::Dictionary, isa_proxy, 4,
                  sizeof(::PMTHit) );
      instance.SetNew(&new_PMTHit);
      instance.SetNewArray(&newArray_PMTHit);
      instance.SetDelete(&delete_PMTHit);
      instance.SetDeleteArray(&deleteArray_PMTHit);
      instance.SetDestructor(&destruct_PMTHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::PMTHit*)
   {
      return GenerateInitInstanceLocal((::PMTHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PMTHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ClusterlEPMTHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ClusterlEPMTHitgR_Dictionary();
   static void *new_ClusterlEPMTHitgR(void *p = 0);
   static void *newArray_ClusterlEPMTHitgR(Long_t size, void *p);
   static void delete_ClusterlEPMTHitgR(void *p);
   static void deleteArray_ClusterlEPMTHitgR(void *p);
   static void destruct_ClusterlEPMTHitgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Cluster<PMTHit>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Cluster<PMTHit>) == sizeof(::ROOT::Shadow::ClusterlEPMTHitgR));
      ::Cluster<PMTHit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Cluster<PMTHit> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Cluster<PMTHit>", ::Cluster<PMTHit>::Class_Version(), "./Cluster.hh", 12,
                  typeid(::Cluster<PMTHit>), DefineBehavior(ptr, ptr),
                  &ClusterlEPMTHitgR_Dictionary, isa_proxy, 4,
                  sizeof(::Cluster<PMTHit>) );
      instance.SetNew(&new_ClusterlEPMTHitgR);
      instance.SetNewArray(&newArray_ClusterlEPMTHitgR);
      instance.SetDelete(&delete_ClusterlEPMTHitgR);
      instance.SetDeleteArray(&deleteArray_ClusterlEPMTHitgR);
      instance.SetDestructor(&destruct_ClusterlEPMTHitgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Cluster<PMTHit>*)
   {
      return GenerateInitInstanceLocal((::Cluster<PMTHit>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Cluster<PMTHit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ClusterlEPMTHitgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Cluster<PMTHit>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Candidate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Candidate(void *p = 0);
   static void *newArray_Candidate(Long_t size, void *p);
   static void delete_Candidate(void *p);
   static void deleteArray_Candidate(void *p);
   static void destruct_Candidate(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Candidate*)
   {
      ::Candidate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Candidate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Candidate", ::Candidate::Class_Version(), "./Candidate.hh", 10,
                  typeid(::Candidate), DefineBehavior(ptr, ptr),
                  &::Candidate::Dictionary, isa_proxy, 4,
                  sizeof(::Candidate) );
      instance.SetNew(&new_Candidate);
      instance.SetNewArray(&newArray_Candidate);
      instance.SetDelete(&delete_Candidate);
      instance.SetDeleteArray(&deleteArray_Candidate);
      instance.SetDestructor(&destruct_Candidate);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Candidate*)
   {
      return GenerateInitInstanceLocal((::Candidate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Candidate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ClusterlECandidategR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ClusterlECandidategR_Dictionary();
   static void *new_ClusterlECandidategR(void *p = 0);
   static void *newArray_ClusterlECandidategR(Long_t size, void *p);
   static void delete_ClusterlECandidategR(void *p);
   static void deleteArray_ClusterlECandidategR(void *p);
   static void destruct_ClusterlECandidategR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Cluster<Candidate>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Cluster<Candidate>) == sizeof(::ROOT::Shadow::ClusterlECandidategR));
      ::Cluster<Candidate> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Cluster<Candidate> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Cluster<Candidate>", ::Cluster<Candidate>::Class_Version(), "./Cluster.hh", 12,
                  typeid(::Cluster<Candidate>), DefineBehavior(ptr, ptr),
                  &ClusterlECandidategR_Dictionary, isa_proxy, 4,
                  sizeof(::Cluster<Candidate>) );
      instance.SetNew(&new_ClusterlECandidategR);
      instance.SetNewArray(&newArray_ClusterlECandidategR);
      instance.SetDelete(&delete_ClusterlECandidategR);
      instance.SetDeleteArray(&deleteArray_ClusterlECandidategR);
      instance.SetDestructor(&destruct_ClusterlECandidategR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Cluster<Candidate>*)
   {
      return GenerateInitInstanceLocal((::Cluster<Candidate>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Cluster<Candidate>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ClusterlECandidategR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Cluster<Candidate>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Particle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Particle(void *p = 0);
   static void *newArray_Particle(Long_t size, void *p);
   static void delete_Particle(void *p);
   static void deleteArray_Particle(void *p);
   static void destruct_Particle(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Particle*)
   {
      ::Particle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Particle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Particle", ::Particle::Class_Version(), "./Particle.hh", 7,
                  typeid(::Particle), DefineBehavior(ptr, ptr),
                  &::Particle::Dictionary, isa_proxy, 4,
                  sizeof(::Particle) );
      instance.SetNew(&new_Particle);
      instance.SetNewArray(&newArray_Particle);
      instance.SetDelete(&delete_Particle);
      instance.SetDeleteArray(&deleteArray_Particle);
      instance.SetDestructor(&destruct_Particle);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Particle*)
   {
      return GenerateInitInstanceLocal((::Particle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Particle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void EventParticles_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EventParticles(void *p = 0);
   static void *newArray_EventParticles(Long_t size, void *p);
   static void delete_EventParticles(void *p);
   static void deleteArray_EventParticles(void *p);
   static void destruct_EventParticles(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::EventParticles*)
   {
      ::EventParticles *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EventParticles >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EventParticles", ::EventParticles::Class_Version(), "./EventParticles.hh", 8,
                  typeid(::EventParticles), DefineBehavior(ptr, ptr),
                  &::EventParticles::Dictionary, isa_proxy, 4,
                  sizeof(::EventParticles) );
      instance.SetNew(&new_EventParticles);
      instance.SetNewArray(&newArray_EventParticles);
      instance.SetDelete(&delete_EventParticles);
      instance.SetDeleteArray(&deleteArray_EventParticles);
      instance.SetDestructor(&destruct_EventParticles);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::EventParticles*)
   {
      return GenerateInitInstanceLocal((::EventParticles*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EventParticles*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ClusterlEParticlegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ClusterlEParticlegR_Dictionary();
   static void *new_ClusterlEParticlegR(void *p = 0);
   static void *newArray_ClusterlEParticlegR(Long_t size, void *p);
   static void delete_ClusterlEParticlegR(void *p);
   static void deleteArray_ClusterlEParticlegR(void *p);
   static void destruct_ClusterlEParticlegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Cluster<Particle>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Cluster<Particle>) == sizeof(::ROOT::Shadow::ClusterlEParticlegR));
      ::Cluster<Particle> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Cluster<Particle> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Cluster<Particle>", ::Cluster<Particle>::Class_Version(), "./Cluster.hh", 12,
                  typeid(::Cluster<Particle>), DefineBehavior(ptr, ptr),
                  &ClusterlEParticlegR_Dictionary, isa_proxy, 4,
                  sizeof(::Cluster<Particle>) );
      instance.SetNew(&new_ClusterlEParticlegR);
      instance.SetNewArray(&newArray_ClusterlEParticlegR);
      instance.SetDelete(&delete_ClusterlEParticlegR);
      instance.SetDeleteArray(&deleteArray_ClusterlEParticlegR);
      instance.SetDestructor(&destruct_ClusterlEParticlegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Cluster<Particle>*)
   {
      return GenerateInitInstanceLocal((::Cluster<Particle>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Cluster<Particle>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ClusterlEParticlegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Cluster<Particle>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TrueCapture_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TrueCapture(void *p = 0);
   static void *newArray_TrueCapture(Long_t size, void *p);
   static void delete_TrueCapture(void *p);
   static void deleteArray_TrueCapture(void *p);
   static void destruct_TrueCapture(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TrueCapture*)
   {
      ::TrueCapture *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TrueCapture >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TrueCapture", ::TrueCapture::Class_Version(), "./TrueCapture.hh", 7,
                  typeid(::TrueCapture), DefineBehavior(ptr, ptr),
                  &::TrueCapture::Dictionary, isa_proxy, 4,
                  sizeof(::TrueCapture) );
      instance.SetNew(&new_TrueCapture);
      instance.SetNewArray(&newArray_TrueCapture);
      instance.SetDelete(&delete_TrueCapture);
      instance.SetDeleteArray(&deleteArray_TrueCapture);
      instance.SetDestructor(&destruct_TrueCapture);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TrueCapture*)
   {
      return GenerateInitInstanceLocal((::TrueCapture*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TrueCapture*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void EventTrueCaptures_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EventTrueCaptures(void *p = 0);
   static void *newArray_EventTrueCaptures(Long_t size, void *p);
   static void delete_EventTrueCaptures(void *p);
   static void deleteArray_EventTrueCaptures(void *p);
   static void destruct_EventTrueCaptures(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::EventTrueCaptures*)
   {
      ::EventTrueCaptures *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EventTrueCaptures >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EventTrueCaptures", ::EventTrueCaptures::Class_Version(), "./EventTrueCaptures.hh", 10,
                  typeid(::EventTrueCaptures), DefineBehavior(ptr, ptr),
                  &::EventTrueCaptures::Dictionary, isa_proxy, 4,
                  sizeof(::EventTrueCaptures) );
      instance.SetNew(&new_EventTrueCaptures);
      instance.SetNewArray(&newArray_EventTrueCaptures);
      instance.SetDelete(&delete_EventTrueCaptures);
      instance.SetDeleteArray(&deleteArray_EventTrueCaptures);
      instance.SetDestructor(&destruct_EventTrueCaptures);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::EventTrueCaptures*)
   {
      return GenerateInitInstanceLocal((::EventTrueCaptures*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EventTrueCaptures*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ClusterlETrueCapturegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ClusterlETrueCapturegR_Dictionary();
   static void *new_ClusterlETrueCapturegR(void *p = 0);
   static void *newArray_ClusterlETrueCapturegR(Long_t size, void *p);
   static void delete_ClusterlETrueCapturegR(void *p);
   static void deleteArray_ClusterlETrueCapturegR(void *p);
   static void destruct_ClusterlETrueCapturegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Cluster<TrueCapture>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Cluster<TrueCapture>) == sizeof(::ROOT::Shadow::ClusterlETrueCapturegR));
      ::Cluster<TrueCapture> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Cluster<TrueCapture> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Cluster<TrueCapture>", ::Cluster<TrueCapture>::Class_Version(), "./Cluster.hh", 12,
                  typeid(::Cluster<TrueCapture>), DefineBehavior(ptr, ptr),
                  &ClusterlETrueCapturegR_Dictionary, isa_proxy, 4,
                  sizeof(::Cluster<TrueCapture>) );
      instance.SetNew(&new_ClusterlETrueCapturegR);
      instance.SetNewArray(&newArray_ClusterlETrueCapturegR);
      instance.SetDelete(&delete_ClusterlETrueCapturegR);
      instance.SetDeleteArray(&deleteArray_ClusterlETrueCapturegR);
      instance.SetDestructor(&destruct_ClusterlETrueCapturegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Cluster<TrueCapture>*)
   {
      return GenerateInitInstanceLocal((::Cluster<TrueCapture>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Cluster<TrueCapture>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ClusterlETrueCapturegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Cluster<TrueCapture>*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
TClass *PMTHit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PMTHit::Class_Name()
{
   return "PMTHit";
}

//______________________________________________________________________________
const char *PMTHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PMTHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PMTHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PMTHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PMTHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PMTHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PMTHit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PMTHit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Cluster<PMTHit>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Cluster<PMTHit>::Class_Name()
{
   return "Cluster<PMTHit>";
}

//______________________________________________________________________________
template <> const char *Cluster<PMTHit>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Cluster<PMTHit>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Cluster<PMTHit>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Cluster<PMTHit>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Cluster<PMTHit>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Cluster<PMTHit>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Cluster<PMTHit>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Cluster<PMTHit>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Candidate::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Candidate::Class_Name()
{
   return "Candidate";
}

//______________________________________________________________________________
const char *Candidate::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Candidate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Candidate::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Candidate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Candidate::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Candidate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Candidate::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Candidate*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Cluster<Candidate>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Cluster<Candidate>::Class_Name()
{
   return "Cluster<Candidate>";
}

//______________________________________________________________________________
template <> const char *Cluster<Candidate>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Cluster<Candidate>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Cluster<Candidate>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Cluster<Candidate>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Cluster<Candidate>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Cluster<Candidate>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Cluster<Candidate>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Cluster<Candidate>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Particle::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Particle::Class_Name()
{
   return "Particle";
}

//______________________________________________________________________________
const char *Particle::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Particle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Particle::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Particle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Particle::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Particle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Particle::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Particle*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *EventParticles::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *EventParticles::Class_Name()
{
   return "EventParticles";
}

//______________________________________________________________________________
const char *EventParticles::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::EventParticles*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EventParticles::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::EventParticles*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EventParticles::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::EventParticles*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EventParticles::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::EventParticles*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Cluster<Particle>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Cluster<Particle>::Class_Name()
{
   return "Cluster<Particle>";
}

//______________________________________________________________________________
template <> const char *Cluster<Particle>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Cluster<Particle>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Cluster<Particle>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Cluster<Particle>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Cluster<Particle>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Cluster<Particle>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Cluster<Particle>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Cluster<Particle>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TrueCapture::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TrueCapture::Class_Name()
{
   return "TrueCapture";
}

//______________________________________________________________________________
const char *TrueCapture::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrueCapture*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrueCapture::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrueCapture*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrueCapture::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrueCapture*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrueCapture::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrueCapture*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *EventTrueCaptures::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *EventTrueCaptures::Class_Name()
{
   return "EventTrueCaptures";
}

//______________________________________________________________________________
const char *EventTrueCaptures::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::EventTrueCaptures*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EventTrueCaptures::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::EventTrueCaptures*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EventTrueCaptures::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::EventTrueCaptures*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EventTrueCaptures::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::EventTrueCaptures*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Cluster<TrueCapture>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Cluster<TrueCapture>::Class_Name()
{
   return "Cluster<TrueCapture>";
}

//______________________________________________________________________________
template <> const char *Cluster<TrueCapture>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Cluster<TrueCapture>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Cluster<TrueCapture>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Cluster<TrueCapture>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Cluster<TrueCapture>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Cluster<TrueCapture>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Cluster<TrueCapture>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Cluster<TrueCapture>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void PMTHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class PMTHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(PMTHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(PMTHit::Class(),this);
   }
}

//______________________________________________________________________________
void PMTHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class PMTHit.
      TClass *R__cl = ::PMTHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pmtPosition", &pmtPosition);
      R__insp.InspectMember(pmtPosition, "pmtPosition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitDirection", &hitDirection);
      R__insp.InspectMember(hitDirection, "hitDirection.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T", &T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Q", &Q);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ToF", &ToF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "I", &I);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "S", &S);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_PMTHit(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::PMTHit : new ::PMTHit;
   }
   static void *newArray_PMTHit(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::PMTHit[nElements] : new ::PMTHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_PMTHit(void *p) {
      delete ((::PMTHit*)p);
   }
   static void deleteArray_PMTHit(void *p) {
      delete [] ((::PMTHit*)p);
   }
   static void destruct_PMTHit(void *p) {
      typedef ::PMTHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::PMTHit

//______________________________________________________________________________
template <> void Cluster<PMTHit>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Cluster<PMTHit>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Cluster<PMTHit>::Class(),this);
   } else {
      R__b.WriteClassBuffer(Cluster<PMTHit>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ClusterlEPMTHitgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Cluster<PMTHit>.
      typedef ::ROOT::Shadow::ClusterlEPMTHitgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Cluster<PMTHit>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "element", (void*)&sobj->element);
      R__insp.InspectMember("vector<PMTHit>", (void*)&sobj->element, "element.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nElements", &sobj->nElements);
   }

}

template <> void Cluster<PMTHit>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ClusterlEPMTHitgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ClusterlEPMTHitgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Cluster<PMTHit> : new ::Cluster<PMTHit>;
   }
   static void *newArray_ClusterlEPMTHitgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Cluster<PMTHit>[nElements] : new ::Cluster<PMTHit>[nElements];
   }
   // Wrapper around operator delete
   static void delete_ClusterlEPMTHitgR(void *p) {
      delete ((::Cluster<PMTHit>*)p);
   }
   static void deleteArray_ClusterlEPMTHitgR(void *p) {
      delete [] ((::Cluster<PMTHit>*)p);
   }
   static void destruct_ClusterlEPMTHitgR(void *p) {
      typedef ::Cluster<PMTHit> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Cluster<PMTHit>

//______________________________________________________________________________
void Particle::Streamer(TBuffer &R__b)
{
   // Stream an object of class Particle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Particle::Class(),this);
   } else {
      R__b.WriteClassBuffer(Particle::Class(),this);
   }
}

//______________________________________________________________________________
void Particle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Particle.
      TClass *R__cl = ::Particle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t", &t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pid", &pid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "intID", &intID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v", &v);
      R__insp.InspectMember(v, "v.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p", &p);
      R__insp.InspectMember(p, "p.");
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Particle(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Particle : new ::Particle;
   }
   static void *newArray_Particle(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Particle[nElements] : new ::Particle[nElements];
   }
   // Wrapper around operator delete
   static void delete_Particle(void *p) {
      delete ((::Particle*)p);
   }
   static void deleteArray_Particle(void *p) {
      delete [] ((::Particle*)p);
   }
   static void destruct_Particle(void *p) {
      typedef ::Particle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Particle

//______________________________________________________________________________
template <> void Cluster<Particle>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Cluster<Particle>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Cluster<Particle>::Class(),this);
   } else {
      R__b.WriteClassBuffer(Cluster<Particle>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ClusterlEParticlegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Cluster<Particle>.
      typedef ::ROOT::Shadow::ClusterlEParticlegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Cluster<Particle>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "element", (void*)&sobj->element);
      R__insp.InspectMember("vector<Particle>", (void*)&sobj->element, "element.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nElements", &sobj->nElements);
   }

}

template <> void Cluster<Particle>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ClusterlEParticlegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ClusterlEParticlegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Cluster<Particle> : new ::Cluster<Particle>;
   }
   static void *newArray_ClusterlEParticlegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Cluster<Particle>[nElements] : new ::Cluster<Particle>[nElements];
   }
   // Wrapper around operator delete
   static void delete_ClusterlEParticlegR(void *p) {
      delete ((::Cluster<Particle>*)p);
   }
   static void deleteArray_ClusterlEParticlegR(void *p) {
      delete [] ((::Cluster<Particle>*)p);
   }
   static void destruct_ClusterlEParticlegR(void *p) {
      typedef ::Cluster<Particle> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Cluster<Particle>

//______________________________________________________________________________
void TrueCapture::Streamer(TBuffer &R__b)
{
   // Stream an object of class TrueCapture.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TrueCapture::Class(),this);
   } else {
      R__b.WriteClassBuffer(TrueCapture::Class(),this);
   }
}

//______________________________________________________________________________
void TrueCapture::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TrueCapture.
      TClass *R__cl = ::TrueCapture::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v", &v);
      R__insp.InspectMember(v, "v.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t", &t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E", &E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nGamma", &nGamma);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TrueCapture(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TrueCapture : new ::TrueCapture;
   }
   static void *newArray_TrueCapture(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TrueCapture[nElements] : new ::TrueCapture[nElements];
   }
   // Wrapper around operator delete
   static void delete_TrueCapture(void *p) {
      delete ((::TrueCapture*)p);
   }
   static void deleteArray_TrueCapture(void *p) {
      delete [] ((::TrueCapture*)p);
   }
   static void destruct_TrueCapture(void *p) {
      typedef ::TrueCapture current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TrueCapture

//______________________________________________________________________________
template <> void Cluster<TrueCapture>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Cluster<TrueCapture>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Cluster<TrueCapture>::Class(),this);
   } else {
      R__b.WriteClassBuffer(Cluster<TrueCapture>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ClusterlETrueCapturegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Cluster<TrueCapture>.
      typedef ::ROOT::Shadow::ClusterlETrueCapturegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Cluster<TrueCapture>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "element", (void*)&sobj->element);
      R__insp.InspectMember("vector<TrueCapture>", (void*)&sobj->element, "element.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nElements", &sobj->nElements);
   }

}

template <> void Cluster<TrueCapture>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ClusterlETrueCapturegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ClusterlETrueCapturegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Cluster<TrueCapture> : new ::Cluster<TrueCapture>;
   }
   static void *newArray_ClusterlETrueCapturegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Cluster<TrueCapture>[nElements] : new ::Cluster<TrueCapture>[nElements];
   }
   // Wrapper around operator delete
   static void delete_ClusterlETrueCapturegR(void *p) {
      delete ((::Cluster<TrueCapture>*)p);
   }
   static void deleteArray_ClusterlETrueCapturegR(void *p) {
      delete [] ((::Cluster<TrueCapture>*)p);
   }
   static void destruct_ClusterlETrueCapturegR(void *p) {
      typedef ::Cluster<TrueCapture> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Cluster<TrueCapture>

//______________________________________________________________________________
void Candidate::Streamer(TBuffer &R__b)
{
   // Stream an object of class Candidate.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Candidate::Class(),this);
   } else {
      R__b.WriteClassBuffer(Candidate::Class(),this);
   }
}

//______________________________________________________________________________
void Candidate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Candidate.
      TClass *R__cl = ::Candidate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "featureMap", (void*)&featureMap);
      R__insp.InspectMember("map<std::string,float>", (void*)&featureMap, "featureMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitID", &hitID);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Candidate(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Candidate : new ::Candidate;
   }
   static void *newArray_Candidate(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Candidate[nElements] : new ::Candidate[nElements];
   }
   // Wrapper around operator delete
   static void delete_Candidate(void *p) {
      delete ((::Candidate*)p);
   }
   static void deleteArray_Candidate(void *p) {
      delete [] ((::Candidate*)p);
   }
   static void destruct_Candidate(void *p) {
      typedef ::Candidate current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Candidate

//______________________________________________________________________________
template <> void Cluster<Candidate>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Cluster<Candidate>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Cluster<Candidate>::Class(),this);
   } else {
      R__b.WriteClassBuffer(Cluster<Candidate>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ClusterlECandidategR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Cluster<Candidate>.
      typedef ::ROOT::Shadow::ClusterlECandidategR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Cluster<Candidate>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "element", (void*)&sobj->element);
      R__insp.InspectMember("vector<Candidate>", (void*)&sobj->element, "element.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nElements", &sobj->nElements);
   }

}

template <> void Cluster<Candidate>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ClusterlECandidategR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ClusterlECandidategR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Cluster<Candidate> : new ::Cluster<Candidate>;
   }
   static void *newArray_ClusterlECandidategR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Cluster<Candidate>[nElements] : new ::Cluster<Candidate>[nElements];
   }
   // Wrapper around operator delete
   static void delete_ClusterlECandidategR(void *p) {
      delete ((::Cluster<Candidate>*)p);
   }
   static void deleteArray_ClusterlECandidategR(void *p) {
      delete [] ((::Cluster<Candidate>*)p);
   }
   static void destruct_ClusterlECandidategR(void *p) {
      typedef ::Cluster<Candidate> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Cluster<Candidate>

//______________________________________________________________________________
void EventParticles::Streamer(TBuffer &R__b)
{
   // Stream an object of class EventParticles.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(EventParticles::Class(),this);
   } else {
      R__b.WriteClassBuffer(EventParticles::Class(),this);
   }
}

//______________________________________________________________________________
void EventParticles::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EventParticles.
      TClass *R__cl = ::EventParticles::IsA();
      if (R__cl || R__insp.IsA()) { }
      Cluster<Particle>::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_EventParticles(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EventParticles : new ::EventParticles;
   }
   static void *newArray_EventParticles(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EventParticles[nElements] : new ::EventParticles[nElements];
   }
   // Wrapper around operator delete
   static void delete_EventParticles(void *p) {
      delete ((::EventParticles*)p);
   }
   static void deleteArray_EventParticles(void *p) {
      delete [] ((::EventParticles*)p);
   }
   static void destruct_EventParticles(void *p) {
      typedef ::EventParticles current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::EventParticles

//______________________________________________________________________________
void EventTrueCaptures::Streamer(TBuffer &R__b)
{
   // Stream an object of class EventTrueCaptures.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(EventTrueCaptures::Class(),this);
   } else {
      R__b.WriteClassBuffer(EventTrueCaptures::Class(),this);
   }
}

//______________________________________________________________________________
void EventTrueCaptures::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EventTrueCaptures.
      TClass *R__cl = ::EventTrueCaptures::IsA();
      if (R__cl || R__insp.IsA()) { }
      Cluster<TrueCapture>::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_EventTrueCaptures(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EventTrueCaptures : new ::EventTrueCaptures;
   }
   static void *newArray_EventTrueCaptures(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EventTrueCaptures[nElements] : new ::EventTrueCaptures[nElements];
   }
   // Wrapper around operator delete
   static void delete_EventTrueCaptures(void *p) {
      delete ((::EventTrueCaptures*)p);
   }
   static void deleteArray_EventTrueCaptures(void *p) {
      delete [] ((::EventTrueCaptures*)p);
   }
   static void destruct_EventTrueCaptures(void *p) {
      typedef ::EventTrueCaptures current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::EventTrueCaptures

namespace ROOT {
   void maplEstringcOfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOfloatgR_Dictionary();
   static void *new_maplEstringcOfloatgR(void *p = 0);
   static void *newArray_maplEstringcOfloatgR(Long_t size, void *p);
   static void delete_maplEstringcOfloatgR(void *p);
   static void deleteArray_maplEstringcOfloatgR(void *p);
   static void destruct_maplEstringcOfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,float>*)
   {
      map<string,float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,float>", -2, "map.dll", 0,
                  typeid(map<string,float>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,float>) );
      instance.SetNew(&new_maplEstringcOfloatgR);
      instance.SetNewArray(&newArray_maplEstringcOfloatgR);
      instance.SetDelete(&delete_maplEstringcOfloatgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOfloatgR);
      instance.SetDestructor(&destruct_maplEstringcOfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,float> : new map<string,float>;
   }
   static void *newArray_maplEstringcOfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,float>[nElements] : new map<string,float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOfloatgR(void *p) {
      delete ((map<string,float>*)p);
   }
   static void deleteArray_maplEstringcOfloatgR(void *p) {
      delete [] ((map<string,float>*)p);
   }
   static void destruct_maplEstringcOfloatgR(void *p) {
      typedef map<string,float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,float>

namespace ROOT {
   void vectorlECandidategR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlECandidategR_Dictionary();
   static void *new_vectorlECandidategR(void *p = 0);
   static void *newArray_vectorlECandidategR(Long_t size, void *p);
   static void delete_vectorlECandidategR(void *p);
   static void deleteArray_vectorlECandidategR(void *p);
   static void destruct_vectorlECandidategR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<Candidate>*)
   {
      vector<Candidate> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Candidate>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Candidate>", -2, "prec_stl/vector", 49,
                  typeid(vector<Candidate>), DefineBehavior(ptr, ptr),
                  0, &vectorlECandidategR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Candidate>) );
      instance.SetNew(&new_vectorlECandidategR);
      instance.SetNewArray(&newArray_vectorlECandidategR);
      instance.SetDelete(&delete_vectorlECandidategR);
      instance.SetDeleteArray(&deleteArray_vectorlECandidategR);
      instance.SetDestructor(&destruct_vectorlECandidategR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<Candidate> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Candidate>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlECandidategR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<Candidate>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlECandidategR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Candidate> : new vector<Candidate>;
   }
   static void *newArray_vectorlECandidategR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Candidate>[nElements] : new vector<Candidate>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlECandidategR(void *p) {
      delete ((vector<Candidate>*)p);
   }
   static void deleteArray_vectorlECandidategR(void *p) {
      delete [] ((vector<Candidate>*)p);
   }
   static void destruct_vectorlECandidategR(void *p) {
      typedef vector<Candidate> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<Candidate>

namespace ROOT {
   void vectorlEPMTHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEPMTHitgR_Dictionary();
   static void *new_vectorlEPMTHitgR(void *p = 0);
   static void *newArray_vectorlEPMTHitgR(Long_t size, void *p);
   static void delete_vectorlEPMTHitgR(void *p);
   static void deleteArray_vectorlEPMTHitgR(void *p);
   static void destruct_vectorlEPMTHitgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<PMTHit>*)
   {
      vector<PMTHit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<PMTHit>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<PMTHit>", -2, "prec_stl/vector", 49,
                  typeid(vector<PMTHit>), DefineBehavior(ptr, ptr),
                  0, &vectorlEPMTHitgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<PMTHit>) );
      instance.SetNew(&new_vectorlEPMTHitgR);
      instance.SetNewArray(&newArray_vectorlEPMTHitgR);
      instance.SetDelete(&delete_vectorlEPMTHitgR);
      instance.SetDeleteArray(&deleteArray_vectorlEPMTHitgR);
      instance.SetDestructor(&destruct_vectorlEPMTHitgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<PMTHit> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<PMTHit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEPMTHitgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<PMTHit>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEPMTHitgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<PMTHit> : new vector<PMTHit>;
   }
   static void *newArray_vectorlEPMTHitgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<PMTHit>[nElements] : new vector<PMTHit>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEPMTHitgR(void *p) {
      delete ((vector<PMTHit>*)p);
   }
   static void deleteArray_vectorlEPMTHitgR(void *p) {
      delete [] ((vector<PMTHit>*)p);
   }
   static void destruct_vectorlEPMTHitgR(void *p) {
      typedef vector<PMTHit> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<PMTHit>

namespace ROOT {
   void vectorlEParticlegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEParticlegR_Dictionary();
   static void *new_vectorlEParticlegR(void *p = 0);
   static void *newArray_vectorlEParticlegR(Long_t size, void *p);
   static void delete_vectorlEParticlegR(void *p);
   static void deleteArray_vectorlEParticlegR(void *p);
   static void destruct_vectorlEParticlegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<Particle>*)
   {
      vector<Particle> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Particle>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Particle>", -2, "prec_stl/vector", 49,
                  typeid(vector<Particle>), DefineBehavior(ptr, ptr),
                  0, &vectorlEParticlegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Particle>) );
      instance.SetNew(&new_vectorlEParticlegR);
      instance.SetNewArray(&newArray_vectorlEParticlegR);
      instance.SetDelete(&delete_vectorlEParticlegR);
      instance.SetDeleteArray(&deleteArray_vectorlEParticlegR);
      instance.SetDestructor(&destruct_vectorlEParticlegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<Particle> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Particle>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEParticlegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<Particle>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEParticlegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Particle> : new vector<Particle>;
   }
   static void *newArray_vectorlEParticlegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Particle>[nElements] : new vector<Particle>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEParticlegR(void *p) {
      delete ((vector<Particle>*)p);
   }
   static void deleteArray_vectorlEParticlegR(void *p) {
      delete [] ((vector<Particle>*)p);
   }
   static void destruct_vectorlEParticlegR(void *p) {
      typedef vector<Particle> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<Particle>

namespace ROOT {
   void vectorlETrueCapturegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETrueCapturegR_Dictionary();
   static void *new_vectorlETrueCapturegR(void *p = 0);
   static void *newArray_vectorlETrueCapturegR(Long_t size, void *p);
   static void delete_vectorlETrueCapturegR(void *p);
   static void deleteArray_vectorlETrueCapturegR(void *p);
   static void destruct_vectorlETrueCapturegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TrueCapture>*)
   {
      vector<TrueCapture> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TrueCapture>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TrueCapture>", -2, "prec_stl/vector", 49,
                  typeid(vector<TrueCapture>), DefineBehavior(ptr, ptr),
                  0, &vectorlETrueCapturegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TrueCapture>) );
      instance.SetNew(&new_vectorlETrueCapturegR);
      instance.SetNewArray(&newArray_vectorlETrueCapturegR);
      instance.SetDelete(&delete_vectorlETrueCapturegR);
      instance.SetDeleteArray(&deleteArray_vectorlETrueCapturegR);
      instance.SetDestructor(&destruct_vectorlETrueCapturegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TrueCapture> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TrueCapture>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETrueCapturegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TrueCapture>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETrueCapturegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TrueCapture> : new vector<TrueCapture>;
   }
   static void *newArray_vectorlETrueCapturegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TrueCapture>[nElements] : new vector<TrueCapture>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETrueCapturegR(void *p) {
      delete ((vector<TrueCapture>*)p);
   }
   static void deleteArray_vectorlETrueCapturegR(void *p) {
      delete [] ((vector<TrueCapture>*)p);
   }
   static void destruct_vectorlETrueCapturegR(void *p) {
      typedef vector<TrueCapture> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TrueCapture>

/********************************************************
* ../src/DataModel/NTagDataModelDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableNTagDataModelDict();

extern "C" void G__set_cpp_environmentNTagDataModelDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("PMTHit.hh");
  G__add_compiledheader("PMTHitCluster.hh");
  G__add_compiledheader("Store.hh");
  G__add_compiledheader("DataModel.hh");
  G__add_compiledheader("EventCandidates.hh");
  G__add_compiledheader("Candidate.hh");
  G__add_compiledheader("EventTrueCaptures.hh");
  G__add_compiledheader("TrueCapture.hh");
  G__add_compiledheader("EventVariables.hh");
  G__add_compiledheader("Particle.hh");
  G__add_compiledheader("EventParticles.hh");
  G__add_compiledheader("NTagInfo.hh");
  G__add_compiledheader("Cluster.hh");
  G__cpp_reset_tagtableNTagDataModelDict();
}
#include <new>
extern "C" int G__cpp_dllrevNTagDataModelDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* PMTHit */
static int G__NTagDataModelDict_213_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PMTHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PMTHit[n];
     } else {
       p = new((void*) gvp) PMTHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PMTHit;
     } else {
       p = new((void*) gvp) PMTHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_PMTHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PMTHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new PMTHit(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) PMTHit(
(float) G__double(libp->para[0]), (float) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_PMTHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PMTHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new PMTHit(*(PMTHit*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) PMTHit(*(PMTHit*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_PMTHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((const PMTHit*) G__getstructoffset())->t();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((const PMTHit*) G__getstructoffset())->q();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const unsigned int& obj = ((const PMTHit*) G__getstructoffset())->i();
         result7->ref = (long) (&obj);
         G__letint(result7, 'h', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const bool& obj = ((const PMTHit*) G__getstructoffset())->s();
         result7->ref = (long) (&obj);
         G__letint(result7, 'g', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PMTHit*) G__getstructoffset())->SetSignalFlag((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const PMTHit*) G__getstructoffset())->Dump();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PMTHit*) G__getstructoffset())->SetToFAndDirection(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PMTHit*) G__getstructoffset())->UnsetToFAndDirection();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((const PMTHit*) G__getstructoffset())->GetToF();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const PMTHit*) G__getstructoffset())->GetDirection();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const PMTHit*) G__getstructoffset())->GetPosition();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const PMTHit*) G__getstructoffset())->operator<(*(PMTHit*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) PMTHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PMTHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) PMTHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      PMTHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const PMTHit*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PMTHit*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PMTHit*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PMTHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PMTHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PMTHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PMTHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_213_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PMTHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PMTHit G__TPMTHit;
static int G__NTagDataModelDict_213_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PMTHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PMTHit*) (soff+(sizeof(PMTHit)*i)))->~G__TPMTHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PMTHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PMTHit*) (soff))->~G__TPMTHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__NTagDataModelDict_213_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PMTHit* dest = (PMTHit*) G__getstructoffset();
   *dest = *(PMTHit*) libp->para[0].ref;
   const PMTHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Cluster<PMTHit> */
static int G__NTagDataModelDict_216_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cluster<PMTHit>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cluster<PMTHit>[n];
     } else {
       p = new((void*) gvp) Cluster<PMTHit>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cluster<PMTHit>;
     } else {
       p = new((void*) gvp) Cluster<PMTHit>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEPMTHitgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<PMTHit>*) G__getstructoffset())->Append(*(PMTHit*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<PMTHit>*) G__getstructoffset())->MoveAppend(*(PMTHit*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<PMTHit>*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Cluster<PMTHit>*) G__getstructoffset())->IsEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<PMTHit>*) G__getstructoffset())->Copy((Cluster<PMTHit>*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<PMTHit>*) G__getstructoffset())->DumpAllElements();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Cluster<PMTHit>*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const PMTHit& obj = ((Cluster<PMTHit>*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const PMTHit& obj = ((Cluster<PMTHit>*) G__getstructoffset())->At((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Cluster<PMTHit>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster<PMTHit>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Cluster<PMTHit>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Cluster<PMTHit>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Cluster<PMTHit>*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<PMTHit>*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<PMTHit>*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<PMTHit>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster<PMTHit>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cluster<PMTHit>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster<PMTHit>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_216_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cluster<PMTHit>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__NTagDataModelDict_216_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Cluster<PMTHit>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Cluster<PMTHit>(*(Cluster<PMTHit>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEPMTHitgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Cluster<PMTHit> G__TClusterlEPMTHitgR;
static int G__NTagDataModelDict_216_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Cluster<PMTHit>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Cluster<PMTHit>*) (soff+(sizeof(Cluster<PMTHit>)*i)))->~G__TClusterlEPMTHitgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Cluster<PMTHit>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Cluster<PMTHit>*) (soff))->~G__TClusterlEPMTHitgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__NTagDataModelDict_216_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cluster<PMTHit>* dest = (Cluster<PMTHit>*) G__getstructoffset();
   *dest = *(Cluster<PMTHit>*) libp->para[0].ref;
   const Cluster<PMTHit>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Candidate */
static int G__NTagDataModelDict_469_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Candidate* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Candidate((const unsigned int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Candidate((const unsigned int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Candidate[n];
       } else {
         p = new((void*) gvp) Candidate[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Candidate;
       } else {
         p = new((void*) gvp) Candidate;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_Candidate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Candidate*) G__getstructoffset())->HitID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((Candidate*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Candidate*) G__getstructoffset())->Set(*(string*) libp->para[0].ref, (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((Candidate*) G__getstructoffset())->Get(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Candidate*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<std::string,float>& obj = ((Candidate*) G__getstructoffset())->GetFeatureMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Candidate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Candidate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Candidate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Candidate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Candidate*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Candidate*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Candidate*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Candidate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Candidate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Candidate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Candidate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_469_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Candidate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__NTagDataModelDict_469_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Candidate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Candidate(*(Candidate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_Candidate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Candidate G__TCandidate;
static int G__NTagDataModelDict_469_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Candidate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Candidate*) (soff+(sizeof(Candidate)*i)))->~G__TCandidate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Candidate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Candidate*) (soff))->~G__TCandidate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__NTagDataModelDict_469_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Candidate* dest = (Candidate*) G__getstructoffset();
   *dest = *(Candidate*) libp->para[0].ref;
   const Candidate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Cluster<Candidate> */
static int G__NTagDataModelDict_471_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cluster<Candidate>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cluster<Candidate>[n];
     } else {
       p = new((void*) gvp) Cluster<Candidate>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cluster<Candidate>;
     } else {
       p = new((void*) gvp) Cluster<Candidate>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlECandidategR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Candidate>*) G__getstructoffset())->Append(*(Candidate*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Candidate>*) G__getstructoffset())->MoveAppend(*(Candidate*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Candidate>*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Cluster<Candidate>*) G__getstructoffset())->IsEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Candidate>*) G__getstructoffset())->Copy((Cluster<Candidate>*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Candidate>*) G__getstructoffset())->DumpAllElements();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Cluster<Candidate>*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Candidate& obj = ((Cluster<Candidate>*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Candidate& obj = ((Cluster<Candidate>*) G__getstructoffset())->At((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Cluster<Candidate>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster<Candidate>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Cluster<Candidate>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Cluster<Candidate>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Cluster<Candidate>*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Candidate>*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Candidate>*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Candidate>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster<Candidate>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cluster<Candidate>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster<Candidate>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_471_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cluster<Candidate>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__NTagDataModelDict_471_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Cluster<Candidate>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Cluster<Candidate>(*(Cluster<Candidate>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlECandidategR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Cluster<Candidate> G__TClusterlECandidategR;
static int G__NTagDataModelDict_471_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Cluster<Candidate>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Cluster<Candidate>*) (soff+(sizeof(Cluster<Candidate>)*i)))->~G__TClusterlECandidategR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Cluster<Candidate>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Cluster<Candidate>*) (soff))->~G__TClusterlECandidategR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__NTagDataModelDict_471_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cluster<Candidate>* dest = (Cluster<Candidate>*) G__getstructoffset();
   *dest = *(Cluster<Candidate>*) libp->para[0].ref;
   const Cluster<Candidate>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Particle */
static int G__NTagDataModelDict_484_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Particle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Particle[n];
     } else {
       p = new((void*) gvp) Particle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Particle;
     } else {
       p = new((void*) gvp) Particle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_Particle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Particle* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Particle(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (unsigned int) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) Particle(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (unsigned int) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Particle(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3])));
     } else {
       p = new((void*) gvp) Particle(
(int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_Particle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Particle*) G__getstructoffset())->PID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Particle*) G__getstructoffset())->Time());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const Particle*) G__getstructoffset())->Vertex();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const Particle*) G__getstructoffset())->Momentum();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Particle*) G__getstructoffset())->IntID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Particle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Particle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Particle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Particle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Particle*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Particle*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Particle*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Particle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Particle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Particle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Particle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_484_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Particle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__NTagDataModelDict_484_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Particle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Particle(*(Particle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_Particle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Particle G__TParticle;
static int G__NTagDataModelDict_484_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Particle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Particle*) (soff+(sizeof(Particle)*i)))->~G__TParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Particle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Particle*) (soff))->~G__TParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__NTagDataModelDict_484_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Particle* dest = (Particle*) G__getstructoffset();
   *dest = *(Particle*) libp->para[0].ref;
   const Particle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EventParticles */
static int G__NTagDataModelDict_485_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventParticles* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventParticles[n];
     } else {
       p = new((void*) gvp) EventParticles[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventParticles;
     } else {
       p = new((void*) gvp) EventParticles;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_EventParticles));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_485_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EventParticles::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_485_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EventParticles::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_485_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EventParticles::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_485_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EventParticles::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_485_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EventParticles*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_485_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EventParticles::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_485_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EventParticles::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_485_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EventParticles::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_485_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EventParticles::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__NTagDataModelDict_485_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EventParticles* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EventParticles(*(EventParticles*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_EventParticles));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EventParticles G__TEventParticles;
static int G__NTagDataModelDict_485_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EventParticles*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EventParticles*) (soff+(sizeof(EventParticles)*i)))->~G__TEventParticles();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EventParticles*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EventParticles*) (soff))->~G__TEventParticles();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__NTagDataModelDict_485_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventParticles* dest = (EventParticles*) G__getstructoffset();
   *dest = *(EventParticles*) libp->para[0].ref;
   const EventParticles& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Cluster<Particle> */
static int G__NTagDataModelDict_486_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cluster<Particle>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cluster<Particle>[n];
     } else {
       p = new((void*) gvp) Cluster<Particle>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cluster<Particle>;
     } else {
       p = new((void*) gvp) Cluster<Particle>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEParticlegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Particle>*) G__getstructoffset())->Append(*(Particle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Particle>*) G__getstructoffset())->MoveAppend(*(Particle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Particle>*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Cluster<Particle>*) G__getstructoffset())->IsEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Particle>*) G__getstructoffset())->Copy((Cluster<Particle>*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Particle>*) G__getstructoffset())->DumpAllElements();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Cluster<Particle>*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Particle& obj = ((Cluster<Particle>*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Particle& obj = ((Cluster<Particle>*) G__getstructoffset())->At((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Cluster<Particle>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster<Particle>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Cluster<Particle>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Cluster<Particle>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Cluster<Particle>*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Particle>*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Particle>*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<Particle>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster<Particle>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cluster<Particle>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster<Particle>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_486_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cluster<Particle>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__NTagDataModelDict_486_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Cluster<Particle>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Cluster<Particle>(*(Cluster<Particle>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEParticlegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Cluster<Particle> G__TClusterlEParticlegR;
static int G__NTagDataModelDict_486_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Cluster<Particle>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Cluster<Particle>*) (soff+(sizeof(Cluster<Particle>)*i)))->~G__TClusterlEParticlegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Cluster<Particle>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Cluster<Particle>*) (soff))->~G__TClusterlEParticlegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__NTagDataModelDict_486_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cluster<Particle>* dest = (Cluster<Particle>*) G__getstructoffset();
   *dest = *(Cluster<Particle>*) libp->para[0].ref;
   const Cluster<Particle>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TrueCapture */
static int G__NTagDataModelDict_491_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrueCapture* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrueCapture[n];
     } else {
       p = new((void*) gvp) TrueCapture[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrueCapture;
     } else {
       p = new((void*) gvp) TrueCapture;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_TrueCapture));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrueCapture*) G__getstructoffset())->Append(*(Particle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TrueCapture*) G__getstructoffset())->Time());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const TrueCapture*) G__getstructoffset())->Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const TrueCapture*) G__getstructoffset())->Vertex();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrueCapture*) G__getstructoffset())->Dump();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TrueCapture::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrueCapture::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TrueCapture::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TrueCapture::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TrueCapture*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrueCapture*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrueCapture*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrueCapture*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrueCapture::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrueCapture::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrueCapture::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_491_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrueCapture::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__NTagDataModelDict_491_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TrueCapture* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TrueCapture(*(TrueCapture*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_TrueCapture));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TrueCapture G__TTrueCapture;
static int G__NTagDataModelDict_491_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TrueCapture*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TrueCapture*) (soff+(sizeof(TrueCapture)*i)))->~G__TTrueCapture();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TrueCapture*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TrueCapture*) (soff))->~G__TTrueCapture();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__NTagDataModelDict_491_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrueCapture* dest = (TrueCapture*) G__getstructoffset();
   *dest = *(TrueCapture*) libp->para[0].ref;
   const TrueCapture& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EventTrueCaptures */
static int G__NTagDataModelDict_492_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EventTrueCaptures*) G__getstructoffset())->Sort();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_492_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EventTrueCaptures::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_492_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EventTrueCaptures::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_492_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EventTrueCaptures::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_492_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EventTrueCaptures::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_492_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EventTrueCaptures*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_492_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EventTrueCaptures::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_492_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EventTrueCaptures::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_492_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EventTrueCaptures::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_492_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EventTrueCaptures::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__NTagDataModelDict_492_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventTrueCaptures *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventTrueCaptures[n];
     } else {
       p = new((void*) gvp) EventTrueCaptures[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventTrueCaptures;
     } else {
       p = new((void*) gvp) EventTrueCaptures;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_EventTrueCaptures));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__NTagDataModelDict_492_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EventTrueCaptures* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EventTrueCaptures(*(EventTrueCaptures*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_EventTrueCaptures));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EventTrueCaptures G__TEventTrueCaptures;
static int G__NTagDataModelDict_492_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EventTrueCaptures*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EventTrueCaptures*) (soff+(sizeof(EventTrueCaptures)*i)))->~G__TEventTrueCaptures();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EventTrueCaptures*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EventTrueCaptures*) (soff))->~G__TEventTrueCaptures();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__NTagDataModelDict_492_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventTrueCaptures* dest = (EventTrueCaptures*) G__getstructoffset();
   *dest = *(EventTrueCaptures*) libp->para[0].ref;
   const EventTrueCaptures& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Cluster<TrueCapture> */
static int G__NTagDataModelDict_493_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cluster<TrueCapture>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cluster<TrueCapture>[n];
     } else {
       p = new((void*) gvp) Cluster<TrueCapture>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cluster<TrueCapture>;
     } else {
       p = new((void*) gvp) Cluster<TrueCapture>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlETrueCapturegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<TrueCapture>*) G__getstructoffset())->Append(*(TrueCapture*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<TrueCapture>*) G__getstructoffset())->MoveAppend(*(TrueCapture*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<TrueCapture>*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Cluster<TrueCapture>*) G__getstructoffset())->IsEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<TrueCapture>*) G__getstructoffset())->Copy((Cluster<TrueCapture>*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<TrueCapture>*) G__getstructoffset())->DumpAllElements();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((Cluster<TrueCapture>*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TrueCapture& obj = ((Cluster<TrueCapture>*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TrueCapture& obj = ((Cluster<TrueCapture>*) G__getstructoffset())->At((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Cluster<TrueCapture>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster<TrueCapture>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Cluster<TrueCapture>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Cluster<TrueCapture>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Cluster<TrueCapture>*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<TrueCapture>*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<TrueCapture>*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cluster<TrueCapture>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster<TrueCapture>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cluster<TrueCapture>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cluster<TrueCapture>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__NTagDataModelDict_493_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cluster<TrueCapture>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__NTagDataModelDict_493_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Cluster<TrueCapture>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Cluster<TrueCapture>(*(Cluster<TrueCapture>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlETrueCapturegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Cluster<TrueCapture> G__TClusterlETrueCapturegR;
static int G__NTagDataModelDict_493_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Cluster<TrueCapture>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Cluster<TrueCapture>*) (soff+(sizeof(Cluster<TrueCapture>)*i)))->~G__TClusterlETrueCapturegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Cluster<TrueCapture>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Cluster<TrueCapture>*) (soff))->~G__TClusterlETrueCapturegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__NTagDataModelDict_493_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cluster<TrueCapture>* dest = (Cluster<TrueCapture>*) G__getstructoffset();
   *dest = *(Cluster<TrueCapture>*) libp->para[0].ref;
   const Cluster<TrueCapture>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* PMTHit */

/* Cluster<PMTHit> */

/* Candidate */

/* Cluster<Candidate> */

/* Particle */

/* EventParticles */

/* Cluster<Particle> */

/* TrueCapture */

/* EventTrueCaptures */

/* Cluster<TrueCapture> */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncNTagDataModelDict {
 public:
  G__Sizep2memfuncNTagDataModelDict(): p(&G__Sizep2memfuncNTagDataModelDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncNTagDataModelDict::*p)();
};

size_t G__get_sizep2memfuncNTagDataModelDict()
{
  G__Sizep2memfuncNTagDataModelDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceNTagDataModelDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__NTagDataModelDictLN_EventParticles))) {
     EventParticles *G__Lderived;
     G__Lderived=(EventParticles*)0x1000;
     {
       Cluster<Particle> *G__Lpbase=(Cluster<Particle>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_EventParticles),G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEParticlegR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__NTagDataModelDictLN_EventTrueCaptures))) {
     EventTrueCaptures *G__Lderived;
     G__Lderived=(EventTrueCaptures*)0x1000;
     {
       Cluster<TrueCapture> *G__Lpbase=(Cluster<TrueCapture>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_EventTrueCaptures),G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlETrueCapturegR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableNTagDataModelDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<PMTHit>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEPMTHitcOallocatorlEPMTHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlEPMTHitcOallocatorlEPMTHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEPMTHitcOallocatorlEPMTHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlEPMTHitcOallocatorlEPMTHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEPMTHitcOallocatorlEPMTHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::string>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string,less<string> >",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,float>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Candidate>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlECandidatecOallocatorlECandidategRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlECandidatecOallocatorlECandidategRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlECandidatecOallocatorlECandidategRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlECandidatecOallocatorlECandidategRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlECandidatecOallocatorlECandidategRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<float>*>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<float,allocator<float> >*>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<float,allocator<float> >*,less<string> >",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Particle>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEParticlecOallocatorlEParticlegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlEParticlecOallocatorlEParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEParticlecOallocatorlEParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlEParticlecOallocatorlEParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEParticlecOallocatorlEParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TrueCapture>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlETrueCapturecOallocatorlETrueCapturegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlETrueCapturecOallocatorlETrueCapturegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlETrueCapturecOallocatorlETrueCapturegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlETrueCapturecOallocatorlETrueCapturegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlETrueCapturecOallocatorlETrueCapturegRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* PMTHit */
static void G__setup_memvarPMTHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_PMTHit));
   { PMTHit *p; p=(PMTHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TVector3),-1,-1,4,"pmtPosition=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TVector3),-1,-1,4,"hitDirection=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"T=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"Q=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"ToF=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"I=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"S=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Cluster<PMTHit> */
static void G__setup_memvarClusterlEPMTHitgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEPMTHitgR));
   { Cluster<PMTHit> *p; p=(Cluster<PMTHit>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEPMTHitcOallocatorlEPMTHitgRsPgR),G__defined_typename("vector<PMTHit>"),-1,2,"element=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,2,"nElements=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Candidate */
static void G__setup_memvarCandidate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_Candidate));
   { Candidate *p; p=(Candidate*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),G__defined_typename("map<std::string,float>"),-1,4,"featureMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"hitID=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Cluster<Candidate> */
static void G__setup_memvarClusterlECandidategR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlECandidategR));
   { Cluster<Candidate> *p; p=(Cluster<Candidate>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlECandidatecOallocatorlECandidategRsPgR),G__defined_typename("vector<Candidate>"),-1,2,"element=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,2,"nElements=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Particle */
static void G__setup_memvarParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_Particle));
   { Particle *p; p=(Particle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"t=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"pid=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"intID=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TVector3),-1,-1,4,"v=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TVector3),-1,-1,4,"p=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EventParticles */
static void G__setup_memvarEventParticles(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_EventParticles));
   { EventParticles *p; p=(EventParticles*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Cluster<Particle> */
static void G__setup_memvarClusterlEParticlegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEParticlegR));
   { Cluster<Particle> *p; p=(Cluster<Particle>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlEParticlecOallocatorlEParticlegRsPgR),G__defined_typename("vector<Particle>"),-1,2,"element=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,2,"nElements=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TrueCapture */
static void G__setup_memvarTrueCapture(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_TrueCapture));
   { TrueCapture *p; p=(TrueCapture*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TVector3),-1,-1,4,"v=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"t=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"E=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"nGamma=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EventTrueCaptures */
static void G__setup_memvarEventTrueCaptures(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_EventTrueCaptures));
   { EventTrueCaptures *p; p=(EventTrueCaptures*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Cluster<TrueCapture> */
static void G__setup_memvarClusterlETrueCapturegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlETrueCapturegR));
   { Cluster<TrueCapture> *p; p=(Cluster<TrueCapture>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_vectorlETrueCapturecOallocatorlETrueCapturegRsPgR),G__defined_typename("vector<TrueCapture>"),-1,2,"element=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,2,"nElements=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarNTagDataModelDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncPMTHit(void) {
   /* PMTHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_PMTHit));
   G__memfunc_setup("PMTHit",534,G__NTagDataModelDict_213_0_1, 105, G__get_linked_tagnum(&G__NTagDataModelDictLN_PMTHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PMTHit",534,G__NTagDataModelDict_213_0_2, 105, G__get_linked_tagnum(&G__NTagDataModelDictLN_PMTHit), -1, 0, 3, 1, 1, 0, 
"f - - 0 - t f - - 0 - q "
"i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PMTHit",534,G__NTagDataModelDict_213_0_3, 105, G__get_linked_tagnum(&G__NTagDataModelDictLN_PMTHit), -1, 0, 1, 1, 1, 0, "u 'PMTHit' - 41 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("t",116,G__NTagDataModelDict_213_0_4, 102, -1, -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("q",113,G__NTagDataModelDict_213_0_5, 102, -1, -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("i",105,G__NTagDataModelDict_213_0_6, 104, -1, -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("s",115,G__NTagDataModelDict_213_0_7, 103, -1, -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSignalFlag",1284,G__NTagDataModelDict_213_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dump",406,G__NTagDataModelDict_213_0_9, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetToFAndDirection",1769,G__NTagDataModelDict_213_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnsetToFAndDirection",1996,G__NTagDataModelDict_213_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetToF",553,G__NTagDataModelDict_213_0_12, 102, -1, -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDirection",1217,G__NTagDataModelDict_213_0_13, 117, G__get_linked_tagnum(&G__NTagDataModelDictLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition",1141,G__NTagDataModelDict_213_0_14, 117, G__get_linked_tagnum(&G__NTagDataModelDictLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__NTagDataModelDict_213_0_15, 103, -1, -1, 0, 1, 1, 1, 8, "u 'PMTHit' - 11 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__NTagDataModelDict_213_0_16, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&PMTHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__NTagDataModelDict_213_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PMTHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__NTagDataModelDict_213_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&PMTHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__NTagDataModelDict_213_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&PMTHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__NTagDataModelDict_213_0_20, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__NTagDataModelDict_213_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__NTagDataModelDict_213_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__NTagDataModelDict_213_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__NTagDataModelDict_213_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PMTHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__NTagDataModelDict_213_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PMTHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__NTagDataModelDict_213_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PMTHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__NTagDataModelDict_213_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PMTHit::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~PMTHit", 660, G__NTagDataModelDict_213_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__NTagDataModelDict_213_0_29, (int) ('u'), G__get_linked_tagnum(&G__NTagDataModelDictLN_PMTHit), -1, 1, 1, 1, 1, 0, "u 'PMTHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncClusterlEPMTHitgR(void) {
   /* Cluster<PMTHit> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEPMTHitgR));
   G__memfunc_setup("Cluster<PMTHit>",1394,G__NTagDataModelDict_216_0_1, 105, G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEPMTHitgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Append",600,G__NTagDataModelDict_216_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'PMTHit' - 11 - elm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MoveAppend",1007,G__NTagDataModelDict_216_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'PMTHit' - 1 - elm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,G__NTagDataModelDict_216_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEmpty",715,G__NTagDataModelDict_216_0_5, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,G__NTagDataModelDict_216_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Cluster<PMTHit>' - 0 - copiedCluster", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpAllElements",1516,G__NTagDataModelDict_216_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSize",699,G__NTagDataModelDict_216_0_8, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__NTagDataModelDict_216_0_9, 117, G__get_linked_tagnum(&G__NTagDataModelDictLN_PMTHit), -1, 1, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("At",181,G__NTagDataModelDict_216_0_10, 117, G__get_linked_tagnum(&G__NTagDataModelDictLN_PMTHit), -1, 1, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__NTagDataModelDict_216_0_11, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Cluster<PMTHit>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__NTagDataModelDict_216_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster<PMTHit>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__NTagDataModelDict_216_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Cluster<PMTHit>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__NTagDataModelDict_216_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Cluster<PMTHit>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__NTagDataModelDict_216_0_15, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__NTagDataModelDict_216_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__NTagDataModelDict_216_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__NTagDataModelDict_216_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__NTagDataModelDict_216_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster<PMTHit>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__NTagDataModelDict_216_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cluster<PMTHit>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__NTagDataModelDict_216_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster<PMTHit>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__NTagDataModelDict_216_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cluster<PMTHit>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Cluster<PMTHit>", 1394, G__NTagDataModelDict_216_0_23, (int) ('i'), G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEPMTHitgR), -1, 0, 1, 1, 1, 0, "u 'Cluster<PMTHit>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Cluster<PMTHit>", 1520, G__NTagDataModelDict_216_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__NTagDataModelDict_216_0_25, (int) ('u'), G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEPMTHitgR), -1, 1, 1, 1, 1, 0, "u 'Cluster<PMTHit>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCandidate(void) {
   /* Candidate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_Candidate));
   G__memfunc_setup("Candidate",893,G__NTagDataModelDict_469_0_1, 105, G__get_linked_tagnum(&G__NTagDataModelDictLN_Candidate), -1, 0, 1, 1, 1, 0, "h - - 10 '0' iHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HitID",434,G__NTagDataModelDict_469_0_2, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__NTagDataModelDict_469_0_3, 102, -1, -1, 1, 1, 1, 1, 0, "u 'string' - 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__NTagDataModelDict_469_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - key f - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G__NTagDataModelDict_469_0_5, 102, -1, -1, 1, 1, 1, 1, 0, "u 'string' - 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__NTagDataModelDict_469_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFeatureMap",1290,G__NTagDataModelDict_469_0_7, 117, G__get_linked_tagnum(&G__NTagDataModelDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR), G__defined_typename("map<std::string,float>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__NTagDataModelDict_469_0_8, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Candidate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__NTagDataModelDict_469_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Candidate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__NTagDataModelDict_469_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Candidate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__NTagDataModelDict_469_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Candidate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__NTagDataModelDict_469_0_12, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__NTagDataModelDict_469_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__NTagDataModelDict_469_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__NTagDataModelDict_469_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__NTagDataModelDict_469_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Candidate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__NTagDataModelDict_469_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Candidate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__NTagDataModelDict_469_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Candidate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__NTagDataModelDict_469_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Candidate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Candidate", 893, G__NTagDataModelDict_469_0_20, (int) ('i'), G__get_linked_tagnum(&G__NTagDataModelDictLN_Candidate), -1, 0, 1, 1, 1, 0, "u 'Candidate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Candidate", 1019, G__NTagDataModelDict_469_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__NTagDataModelDict_469_0_22, (int) ('u'), G__get_linked_tagnum(&G__NTagDataModelDictLN_Candidate), -1, 1, 1, 1, 1, 0, "u 'Candidate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncClusterlECandidategR(void) {
   /* Cluster<Candidate> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlECandidategR));
   G__memfunc_setup("Cluster<Candidate>",1753,G__NTagDataModelDict_471_0_1, 105, G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlECandidategR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Append",600,G__NTagDataModelDict_471_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Candidate' - 11 - elm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MoveAppend",1007,G__NTagDataModelDict_471_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Candidate' - 1 - elm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,G__NTagDataModelDict_471_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEmpty",715,G__NTagDataModelDict_471_0_5, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,G__NTagDataModelDict_471_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Cluster<Candidate>' - 0 - copiedCluster", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpAllElements",1516,G__NTagDataModelDict_471_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSize",699,G__NTagDataModelDict_471_0_8, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__NTagDataModelDict_471_0_9, 117, G__get_linked_tagnum(&G__NTagDataModelDictLN_Candidate), -1, 1, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("At",181,G__NTagDataModelDict_471_0_10, 117, G__get_linked_tagnum(&G__NTagDataModelDictLN_Candidate), -1, 1, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__NTagDataModelDict_471_0_11, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Cluster<Candidate>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__NTagDataModelDict_471_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster<Candidate>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__NTagDataModelDict_471_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Cluster<Candidate>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__NTagDataModelDict_471_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Cluster<Candidate>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__NTagDataModelDict_471_0_15, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__NTagDataModelDict_471_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__NTagDataModelDict_471_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__NTagDataModelDict_471_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__NTagDataModelDict_471_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster<Candidate>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__NTagDataModelDict_471_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cluster<Candidate>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__NTagDataModelDict_471_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster<Candidate>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__NTagDataModelDict_471_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cluster<Candidate>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Cluster<Candidate>", 1753, G__NTagDataModelDict_471_0_23, (int) ('i'), G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlECandidategR), -1, 0, 1, 1, 1, 0, "u 'Cluster<Candidate>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Cluster<Candidate>", 1879, G__NTagDataModelDict_471_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__NTagDataModelDict_471_0_25, (int) ('u'), G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlECandidategR), -1, 1, 1, 1, 1, 0, "u 'Cluster<Candidate>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncParticle(void) {
   /* Particle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_Particle));
   G__memfunc_setup("Particle",820,G__NTagDataModelDict_484_0_1, 105, G__get_linked_tagnum(&G__NTagDataModelDictLN_Particle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Particle",820,G__NTagDataModelDict_484_0_2, 105, G__get_linked_tagnum(&G__NTagDataModelDictLN_Particle), -1, 0, 5, 1, 1, 0, 
"i - - 0 - id f - - 0 - time "
"u 'TVector3' - 0 - vtx u 'TVector3' - 0 - mom "
"h - - 0 '0' interactionID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PID",221,G__NTagDataModelDict_484_0_3, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Time",399,G__NTagDataModelDict_484_0_4, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Vertex",638,G__NTagDataModelDict_484_0_5, 117, G__get_linked_tagnum(&G__NTagDataModelDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Momentum",850,G__NTagDataModelDict_484_0_6, 117, G__get_linked_tagnum(&G__NTagDataModelDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IntID",440,G__NTagDataModelDict_484_0_7, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__NTagDataModelDict_484_0_8, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Particle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__NTagDataModelDict_484_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Particle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__NTagDataModelDict_484_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Particle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__NTagDataModelDict_484_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Particle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__NTagDataModelDict_484_0_12, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__NTagDataModelDict_484_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__NTagDataModelDict_484_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__NTagDataModelDict_484_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__NTagDataModelDict_484_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Particle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__NTagDataModelDict_484_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Particle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__NTagDataModelDict_484_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Particle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__NTagDataModelDict_484_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Particle::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Particle", 820, G__NTagDataModelDict_484_0_20, (int) ('i'), G__get_linked_tagnum(&G__NTagDataModelDictLN_Particle), -1, 0, 1, 1, 1, 0, "u 'Particle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Particle", 946, G__NTagDataModelDict_484_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__NTagDataModelDict_484_0_22, (int) ('u'), G__get_linked_tagnum(&G__NTagDataModelDictLN_Particle), -1, 1, 1, 1, 1, 0, "u 'Particle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEventParticles(void) {
   /* EventParticles */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_EventParticles));
   G__memfunc_setup("EventParticles",1449,G__NTagDataModelDict_485_0_1, 105, G__get_linked_tagnum(&G__NTagDataModelDictLN_EventParticles), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpAllElements",1516,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__NTagDataModelDict_485_0_3, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EventParticles::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__NTagDataModelDict_485_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EventParticles::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__NTagDataModelDict_485_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EventParticles::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__NTagDataModelDict_485_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EventParticles::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__NTagDataModelDict_485_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__NTagDataModelDict_485_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EventParticles::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__NTagDataModelDict_485_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EventParticles::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__NTagDataModelDict_485_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EventParticles::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__NTagDataModelDict_485_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EventParticles::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EventParticles", 1449, G__NTagDataModelDict_485_0_15, (int) ('i'), G__get_linked_tagnum(&G__NTagDataModelDictLN_EventParticles), -1, 0, 1, 1, 1, 0, "u 'EventParticles' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EventParticles", 1575, G__NTagDataModelDict_485_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__NTagDataModelDict_485_0_17, (int) ('u'), G__get_linked_tagnum(&G__NTagDataModelDictLN_EventParticles), -1, 1, 1, 1, 1, 0, "u 'EventParticles' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncClusterlEParticlegR(void) {
   /* Cluster<Particle> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEParticlegR));
   G__memfunc_setup("Cluster<Particle>",1680,G__NTagDataModelDict_486_0_1, 105, G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEParticlegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Append",600,G__NTagDataModelDict_486_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Particle' - 11 - elm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MoveAppend",1007,G__NTagDataModelDict_486_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Particle' - 1 - elm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,G__NTagDataModelDict_486_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEmpty",715,G__NTagDataModelDict_486_0_5, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,G__NTagDataModelDict_486_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Cluster<Particle>' - 0 - copiedCluster", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpAllElements",1516,G__NTagDataModelDict_486_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSize",699,G__NTagDataModelDict_486_0_8, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__NTagDataModelDict_486_0_9, 117, G__get_linked_tagnum(&G__NTagDataModelDictLN_Particle), -1, 1, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("At",181,G__NTagDataModelDict_486_0_10, 117, G__get_linked_tagnum(&G__NTagDataModelDictLN_Particle), -1, 1, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__NTagDataModelDict_486_0_11, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Cluster<Particle>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__NTagDataModelDict_486_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster<Particle>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__NTagDataModelDict_486_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Cluster<Particle>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__NTagDataModelDict_486_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Cluster<Particle>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__NTagDataModelDict_486_0_15, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__NTagDataModelDict_486_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__NTagDataModelDict_486_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__NTagDataModelDict_486_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__NTagDataModelDict_486_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster<Particle>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__NTagDataModelDict_486_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cluster<Particle>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__NTagDataModelDict_486_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster<Particle>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__NTagDataModelDict_486_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cluster<Particle>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Cluster<Particle>", 1680, G__NTagDataModelDict_486_0_23, (int) ('i'), G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEParticlegR), -1, 0, 1, 1, 1, 0, "u 'Cluster<Particle>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Cluster<Particle>", 1806, G__NTagDataModelDict_486_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__NTagDataModelDict_486_0_25, (int) ('u'), G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlEParticlegR), -1, 1, 1, 1, 1, 0, "u 'Cluster<Particle>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrueCapture(void) {
   /* TrueCapture */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_TrueCapture));
   G__memfunc_setup("TrueCapture",1140,G__NTagDataModelDict_491_0_1, 105, G__get_linked_tagnum(&G__NTagDataModelDictLN_TrueCapture), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Append",600,G__NTagDataModelDict_491_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Particle' - 11 - particle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Time",399,G__NTagDataModelDict_491_0_3, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Energy",618,G__NTagDataModelDict_491_0_4, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Vertex",638,G__NTagDataModelDict_491_0_5, 117, G__get_linked_tagnum(&G__NTagDataModelDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dump",406,G__NTagDataModelDict_491_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__NTagDataModelDict_491_0_7, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TrueCapture::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__NTagDataModelDict_491_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrueCapture::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__NTagDataModelDict_491_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TrueCapture::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__NTagDataModelDict_491_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TrueCapture::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__NTagDataModelDict_491_0_11, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__NTagDataModelDict_491_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__NTagDataModelDict_491_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__NTagDataModelDict_491_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__NTagDataModelDict_491_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrueCapture::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__NTagDataModelDict_491_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrueCapture::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__NTagDataModelDict_491_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrueCapture::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__NTagDataModelDict_491_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrueCapture::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TrueCapture", 1140, G__NTagDataModelDict_491_0_19, (int) ('i'), G__get_linked_tagnum(&G__NTagDataModelDictLN_TrueCapture), -1, 0, 1, 1, 1, 0, "u 'TrueCapture' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrueCapture", 1266, G__NTagDataModelDict_491_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__NTagDataModelDict_491_0_21, (int) ('u'), G__get_linked_tagnum(&G__NTagDataModelDictLN_TrueCapture), -1, 1, 1, 1, 1, 0, "u 'TrueCapture' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEventTrueCaptures(void) {
   /* EventTrueCaptures */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_EventTrueCaptures));
   G__memfunc_setup("Sort",424,G__NTagDataModelDict_492_0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpAllElements",1516,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__NTagDataModelDict_492_0_3, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EventTrueCaptures::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__NTagDataModelDict_492_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EventTrueCaptures::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__NTagDataModelDict_492_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EventTrueCaptures::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__NTagDataModelDict_492_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EventTrueCaptures::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__NTagDataModelDict_492_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__NTagDataModelDict_492_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EventTrueCaptures::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__NTagDataModelDict_492_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EventTrueCaptures::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__NTagDataModelDict_492_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EventTrueCaptures::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__NTagDataModelDict_492_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EventTrueCaptures::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("EventTrueCaptures", 1769, G__NTagDataModelDict_492_0_15, (int) ('i'), G__get_linked_tagnum(&G__NTagDataModelDictLN_EventTrueCaptures), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("EventTrueCaptures", 1769, G__NTagDataModelDict_492_0_16, (int) ('i'), G__get_linked_tagnum(&G__NTagDataModelDictLN_EventTrueCaptures), -1, 0, 1, 1, 1, 0, "u 'EventTrueCaptures' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EventTrueCaptures", 1895, G__NTagDataModelDict_492_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__NTagDataModelDict_492_0_18, (int) ('u'), G__get_linked_tagnum(&G__NTagDataModelDictLN_EventTrueCaptures), -1, 1, 1, 1, 1, 0, "u 'EventTrueCaptures' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncClusterlETrueCapturegR(void) {
   /* Cluster<TrueCapture> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlETrueCapturegR));
   G__memfunc_setup("Cluster<TrueCapture>",2000,G__NTagDataModelDict_493_0_1, 105, G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlETrueCapturegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Append",600,G__NTagDataModelDict_493_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TrueCapture' - 11 - elm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MoveAppend",1007,G__NTagDataModelDict_493_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TrueCapture' - 1 - elm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,G__NTagDataModelDict_493_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsEmpty",715,G__NTagDataModelDict_493_0_5, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,G__NTagDataModelDict_493_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Cluster<TrueCapture>' - 0 - copiedCluster", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpAllElements",1516,G__NTagDataModelDict_493_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSize",699,G__NTagDataModelDict_493_0_8, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__NTagDataModelDict_493_0_9, 117, G__get_linked_tagnum(&G__NTagDataModelDictLN_TrueCapture), -1, 1, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("At",181,G__NTagDataModelDict_493_0_10, 117, G__get_linked_tagnum(&G__NTagDataModelDictLN_TrueCapture), -1, 1, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__NTagDataModelDict_493_0_11, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Cluster<TrueCapture>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__NTagDataModelDict_493_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster<TrueCapture>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__NTagDataModelDict_493_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Cluster<TrueCapture>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__NTagDataModelDict_493_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Cluster<TrueCapture>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__NTagDataModelDict_493_0_15, 85, G__get_linked_tagnum(&G__NTagDataModelDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__NTagDataModelDict_493_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__NTagDataModelDict_493_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__NTagDataModelDict_493_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__NTagDataModelDict_493_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster<TrueCapture>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__NTagDataModelDict_493_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cluster<TrueCapture>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__NTagDataModelDict_493_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cluster<TrueCapture>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__NTagDataModelDict_493_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cluster<TrueCapture>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Cluster<TrueCapture>", 2000, G__NTagDataModelDict_493_0_23, (int) ('i'), G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlETrueCapturegR), -1, 0, 1, 1, 1, 0, "u 'Cluster<TrueCapture>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Cluster<TrueCapture>", 2126, G__NTagDataModelDict_493_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__NTagDataModelDict_493_0_25, (int) ('u'), G__get_linked_tagnum(&G__NTagDataModelDictLN_ClusterlETrueCapturegR), -1, 1, 1, 1, 1, 0, "u 'Cluster<TrueCapture>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncNTagDataModelDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalNTagDataModelDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcNTagDataModelDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__NTagDataModelDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_PMTHit = { "PMTHit" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_ClusterlEPMTHitgR = { "Cluster<PMTHit>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_vectorlEPMTHitcOallocatorlEPMTHitgRsPgR = { "vector<PMTHit,allocator<PMTHit> >" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_reverse_iteratorlEvectorlEPMTHitcOallocatorlEPMTHitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<PMTHit,allocator<PMTHit> >::iterator>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR = { "map<string,float,less<string>,allocator<pair<const string,float> > >" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR = { "map<string,string,less<string>,allocator<pair<const string,string> > >" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_Candidate = { "Candidate" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_ClusterlECandidategR = { "Cluster<Candidate>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_vectorlECandidatecOallocatorlECandidategRsPgR = { "vector<Candidate,allocator<Candidate> >" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_reverse_iteratorlEvectorlECandidatecOallocatorlECandidategRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Candidate,allocator<Candidate> >::iterator>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRmUgRsPgRsPgR = { "map<string,vector<float,allocator<float> >*,less<string>,allocator<pair<const string,vector<float,allocator<float> >*> > >" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_Particle = { "Particle" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_EventParticles = { "EventParticles" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_ClusterlEParticlegR = { "Cluster<Particle>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_vectorlEParticlecOallocatorlEParticlegRsPgR = { "vector<Particle,allocator<Particle> >" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_reverse_iteratorlEvectorlEParticlecOallocatorlEParticlegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Particle,allocator<Particle> >::iterator>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_TrueCapture = { "TrueCapture" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_EventTrueCaptures = { "EventTrueCaptures" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_ClusterlETrueCapturegR = { "Cluster<TrueCapture>" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_vectorlETrueCapturecOallocatorlETrueCapturegRsPgR = { "vector<TrueCapture,allocator<TrueCapture> >" , 99 , -1 };
G__linked_taginfo G__NTagDataModelDictLN_reverse_iteratorlEvectorlETrueCapturecOallocatorlETrueCapturegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TrueCapture,allocator<TrueCapture> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableNTagDataModelDict() {
  G__NTagDataModelDictLN_TClass.tagnum = -1 ;
  G__NTagDataModelDictLN_TBuffer.tagnum = -1 ;
  G__NTagDataModelDictLN_TMemberInspector.tagnum = -1 ;
  G__NTagDataModelDictLN_string.tagnum = -1 ;
  G__NTagDataModelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__NTagDataModelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__NTagDataModelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__NTagDataModelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__NTagDataModelDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__NTagDataModelDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TVector3.tagnum = -1 ;
  G__NTagDataModelDictLN_PMTHit.tagnum = -1 ;
  G__NTagDataModelDictLN_ClusterlEPMTHitgR.tagnum = -1 ;
  G__NTagDataModelDictLN_vectorlEPMTHitcOallocatorlEPMTHitgRsPgR.tagnum = -1 ;
  G__NTagDataModelDictLN_reverse_iteratorlEvectorlEPMTHitcOallocatorlEPMTHitgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__NTagDataModelDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR.tagnum = -1 ;
  G__NTagDataModelDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__NTagDataModelDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__NTagDataModelDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__NTagDataModelDictLN_Candidate.tagnum = -1 ;
  G__NTagDataModelDictLN_ClusterlECandidategR.tagnum = -1 ;
  G__NTagDataModelDictLN_vectorlECandidatecOallocatorlECandidategRsPgR.tagnum = -1 ;
  G__NTagDataModelDictLN_reverse_iteratorlEvectorlECandidatecOallocatorlECandidategRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__NTagDataModelDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRmUgRsPgRsPgR.tagnum = -1 ;
  G__NTagDataModelDictLN_Particle.tagnum = -1 ;
  G__NTagDataModelDictLN_EventParticles.tagnum = -1 ;
  G__NTagDataModelDictLN_ClusterlEParticlegR.tagnum = -1 ;
  G__NTagDataModelDictLN_vectorlEParticlecOallocatorlEParticlegRsPgR.tagnum = -1 ;
  G__NTagDataModelDictLN_reverse_iteratorlEvectorlEParticlecOallocatorlEParticlegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__NTagDataModelDictLN_TrueCapture.tagnum = -1 ;
  G__NTagDataModelDictLN_EventTrueCaptures.tagnum = -1 ;
  G__NTagDataModelDictLN_ClusterlETrueCapturegR.tagnum = -1 ;
  G__NTagDataModelDictLN_vectorlETrueCapturecOallocatorlETrueCapturegRsPgR.tagnum = -1 ;
  G__NTagDataModelDictLN_reverse_iteratorlEvectorlETrueCapturecOallocatorlETrueCapturegRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableNTagDataModelDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_string);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TVector3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_PMTHit),sizeof(PMTHit),-1,295680,(char*)NULL,G__setup_memvarPMTHit,G__setup_memfuncPMTHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_ClusterlEPMTHitgR),sizeof(Cluster<PMTHit>),-1,262400,(char*)NULL,G__setup_memvarClusterlEPMTHitgR,G__setup_memfuncClusterlEPMTHitgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_vectorlEPMTHitcOallocatorlEPMTHitgRsPgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlEPMTHitcOallocatorlEPMTHitgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_Candidate),sizeof(Candidate),-1,262400,(char*)NULL,G__setup_memvarCandidate,G__setup_memfuncCandidate);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_ClusterlECandidategR),sizeof(Cluster<Candidate>),-1,262400,(char*)NULL,G__setup_memvarClusterlECandidategR,G__setup_memfuncClusterlECandidategR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_vectorlECandidatecOallocatorlECandidategRsPgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlECandidatecOallocatorlECandidategRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_maplEstringcOvectorlEfloatcOallocatorlEfloatgRsPgRmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEfloatcOallocatorlEfloatgRsPgRmUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_Particle),sizeof(Particle),-1,295168,(char*)NULL,G__setup_memvarParticle,G__setup_memfuncParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_EventParticles),sizeof(EventParticles),-1,262400,(char*)NULL,G__setup_memvarEventParticles,G__setup_memfuncEventParticles);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_ClusterlEParticlegR),sizeof(Cluster<Particle>),-1,262400,(char*)NULL,G__setup_memvarClusterlEParticlegR,G__setup_memfuncClusterlEParticlegR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_vectorlEParticlecOallocatorlEParticlegRsPgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlEParticlecOallocatorlEParticlegRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_TrueCapture),sizeof(TrueCapture),-1,262400,(char*)NULL,G__setup_memvarTrueCapture,G__setup_memfuncTrueCapture);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_EventTrueCaptures),sizeof(EventTrueCaptures),-1,262144,(char*)NULL,G__setup_memvarEventTrueCaptures,G__setup_memfuncEventTrueCaptures);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_ClusterlETrueCapturegR),sizeof(Cluster<TrueCapture>),-1,262400,(char*)NULL,G__setup_memvarClusterlETrueCapturegR,G__setup_memfuncClusterlETrueCapturegR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_vectorlETrueCapturecOallocatorlETrueCapturegRsPgR);
   G__get_linked_tagnum_fwd(&G__NTagDataModelDictLN_reverse_iteratorlEvectorlETrueCapturecOallocatorlETrueCapturegRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupNTagDataModelDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupNTagDataModelDict()");
  G__set_cpp_environmentNTagDataModelDict();
  G__cpp_setup_tagtableNTagDataModelDict();

  G__cpp_setup_inheritanceNTagDataModelDict();

  G__cpp_setup_typetableNTagDataModelDict();

  G__cpp_setup_memvarNTagDataModelDict();

  G__cpp_setup_memfuncNTagDataModelDict();
  G__cpp_setup_globalNTagDataModelDict();
  G__cpp_setup_funcNTagDataModelDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncNTagDataModelDict();
  return;
}
class G__cpp_setup_initNTagDataModelDict {
  public:
    G__cpp_setup_initNTagDataModelDict() { G__add_setup_func("NTagDataModelDict",(G__incsetup)(&G__cpp_setupNTagDataModelDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initNTagDataModelDict() { G__remove_setup_func("NTagDataModelDict"); }
};
G__cpp_setup_initNTagDataModelDict G__cpp_setup_initializerNTagDataModelDict;

